<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Restaurants_served extends CI_Controller {private $_hotel_restaurant = "hotel_resturant_served";    public function __construct() {        parent::__construct();        $this->load->helper('url');        $this->load->helper('commonmisc_helper');        $this->load->helper('validationmisc_helper');        $this->load->model('Restaurant_served');        $u1 = $this->session->userdata('admin_user_id');         if(!isset($u1)){            redirect('/admins', 'refresh');        }    }    public function bill_list(){         $loggedHotelAdmin = $this->session->all_userdata();        $head02Temp = $this->load->view('templates/head02',['loggedHotelAdmin'=>$loggedHotelAdmin],TRUE);        $leftmenu02Temp = $this->load->view('templates/leftMenu02',['activeMenu'=>'restaurants_served/bill_list'],TRUE);        $this->load->view('restaurant_serve/serve_list', [            'head02Temp' => $head02Temp,            'leftmenu02Temp' => $leftmenu02Temp,            'timeSlotOptions' => timeSlotOptions(),                        'customerOptions'=> $this->getCustomers(),            'restaurantMenuList' => $this->getRestaurantMenuList(),            'servePlaceOption' => getServePlace(),            'paidOpion' => getItemAvailable(),            'availableOption' => getItemAvailable(),            'sessionOption' => getSession(),        ]);    }    public function ajaxAllRestaurantsServedDataTable() {        // Datatables Variables        $draw = intval($this->input->get("draw"));        $start = intval($this->input->get("start"));        $length = intval($this->input->get("length"));        $servedPlace = getServedPlace();        $restaurants = $this->Restaurant_served->getRestaurant_served(['where'=>['rs.hotel_id'=>$this->session->userdata('hotel_id')]]);        $rows = [];        foreach ($restaurants as $k => $restaurant) {            ;             $rows[] = [                "DT_RowId" => "row_" . $restaurant['resturant_service_id'],                "resturant_service_id" => $restaurant['resturant_service_id'],                "hotel_id" => $restaurant['hotel_id'],                "hotel_name" => $restaurant['hotel_name'],                "customer_id" => $restaurant['customer_id'],                "cust_name" => ucwords($restaurant['cust_name']),                "menu_session" => $restaurant['menu_session'],                "served_place" => ucwords($servedPlace[$restaurant['served_place']]."&nbsp;-<br>&nbsp;".$restaurant['served_place_detail']),                "served_on" => $restaurant['served_on'],                "served_item" => $this->viewServedItems($restaurant['served_item']),                "isPaid" => $restaurant['isPaid'] == "Y" ? "Yes" : "No",                "isFinal" => $restaurant['isFinal'] == "Y" ? "Yes" : "No"            ];        }        echo json_encode([            "draw" => $draw,            "recordsTotal" => count($restaurants),            "recordsFiltered" => count($restaurants),            "data" => $rows        ]);    }    private function viewServedItems($json){        $items = $this->Restaurant_served->getResturantMenu(['select'=>"menu_id,item_name"]);        $arr = json_decode($json,true);        $html1 = "<table class='table table-striped2 table-bordered2'><thead><tr><th>Item</th><th>Quantity</th><th>Price</th></tr></thead><tbody>";        $total_price = 0;        $totalItem = 0;        if(!empty($arr)){                foreach ($arr as $k => $row){            $totalItem += $row['quantity'];            $item_name = "";            $item_price = $row['quantity'] * $row['item_price'];            $total_price += $item_price;            foreach ($items as $key=>$item){                if($row['menu_id'] == $item['menu_id']){                    $item_name = ucwords($item['item_name']);                }            }                        $html1 .= "<tr><td>{$item_name}</td><td>{$row['quantity']}</td><td>{$item_price}&nbsp;[{$row['item_price']}]</td></tr>";        }        $html1 .= "<tr><td colspan=2>Total item &nbsp;[{$totalItem}]</td><td>Total Amount &nbsp;{$total_price}</td></tr>";        }        $html1 .= "</tbody></table>";                return $html1;            }        public function ajaxRestaurantServeDetails() {        $params = [            'where' => ['resturant_service_id' => $this->input->post('resturant_service_id')]        ];        $restaurant = $this->Restaurant_served->getRestaurant_served($params);        echo json_encode($restaurant[0]);    }    public function ajaxRestaurantMasterDelete() {        $where = ['resturant_service_id' => $this->input->post('resturant_service_id')];        $restaurant = $this->Restaurant_served->deleteRestaurant($where);        return json_encode(['true']);    }    public function ajaxUniqueRestaurantAttr(){        $post = $this->input->post();        if (isset($post['primaryVal']) && !empty($post['primaryVal'])) {            echo checkHotelUnique([                'table' => $this->_hotel_restaurant,                'primary_id' => "menu_id",                'primaryVal' => $post['primaryVal'],                 'hotelIdValue'=>$this->session->userdata('hotel_id'),                'attr' => $post['attr'],                'attrVal' => $post['attrVal']                    ]);        } else {            echo checkHotelUnique([                'table' => $this->_hotel_restaurant,                'primary_id' => "menu_id",                'primaryVal' => 0,                'hotelIdValue'=>$this->session->userdata('hotel_id'),                'attr' => $post['attr'],                'attrVal' => $post['attrVal']                    ]);        }    }    public function ajaxRestaurantMasterSubmit() {        $post = $this->input->post();        if (isset($post['menu_id']) && !empty($post['menu_id'])) {            $this->Restaurant_served->putRestaurant($post);        } else {            $this->Restaurant_served->postRestaurant($post);        }    }    private function getCustomers(){        $result = $this->Restaurant_served->getCustomers();        $customers = [];        if (!empty($result)) {            foreach ($result as $key => $cst) {                $customers[$cst['cust_id']] = $cst['cust_name'];            }        }        return $customers;            }    private function getRestaurantMenuList(){        $result = $this->Restaurant_served->getResturantMenu(['select'=>"menu_id,menu_session,item_name"]);        $items = [];        foreach ($result as $key => $row){            $items[$row['menu_session']][$row['menu_id']] = $row['item_name'];        }        return $items;    }    public function setAjaxFinalBill(){                $this->Restaurant_served->billFinal($this->input->post('resturant_service_id'));    }}