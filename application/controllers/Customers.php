<?phpdefined('BASEPATH') OR exit('No direct script access allowed');class Customers extends CI_Controller {    private $_customer_master = "customer_master";    private $_customer_doc_master = "customer_doc_master";    public function __construct() {        parent::__construct();        $this->load->helper('form', 'security');        $this->load->helper('commonmisc_helper');        $this->load->helper('validationmisc_helper');        $this->load->library('form_validation', 'session');        $this->load->model('Customer');        $this->load->model('Membership_master');        $u1 = $this->session->userdata('admin_user_id');         if(!isset($u1)){            redirect('/admins', 'refresh');        }    }    public function index() {        $loggedHotelAdmin = $this->session->all_userdata();        $head02Temp = $this->load->view('templates/head02',['loggedHotelAdmin'=>$loggedHotelAdmin],TRUE);        $leftmenu02Temp = $this->load->view('templates/leftMenu02',['activeMenu'=>'customers'],TRUE);        $this->load->view('customers/customers_list', [            'head02Temp'=>$head02Temp,            'leftmenu02Temp'=>$leftmenu02Temp,            'membershipOptions' => membershipOptions(),            'hotelId' =>$this->session->userdata('hotel_id')        ]);    }    public function ajaxAllCustomersMasterDataTable() {        // Datatables Variables        $memberCards = membershipOptions();        $memberCards = $memberCards[$this->session->userdata('hotel_id')];               $draw = intval($this->input->get("draw"));        $start = intval($this->input->get("start"));        $length = intval($this->input->get("length"));        $Customers = $this->Customer->getCustomer(['where'=>['cm.hotel_id'=>$this->session->userdata('hotel_id')]]);        $rows = [];        foreach ($Customers as $k => $customer) {            $card = "";            if(isset($customer['membership_type']) && !empty($customer['membership_type'] && !empty($memberCards[$customer['membership_type']]))){                $card = $memberCards[$customer['membership_type']];            }else{                $card = "";            }                        $rows[] = [                "DT_RowId" => "row_" . $customer['cust_id'],                "cust_id" => $customer['cust_id'],                'cust_name'=> ucwords($customer['cust_name']),                'cust_phone'=>$customer['cust_phone'],                'cust_email'=>$customer['cust_email'],                'cust_status'=> $customer['cust_status'],                'membership_type' => ucwords($customer['cust_status'] == 'Member' && $card!="" ? $card : "N/A"),                'membership_issue_date' => $customer['cust_status'] == 'Member' ? $customer['membership_issue_date'] : "N/A"            ];        }        echo json_encode([            "draw" => $draw,            "recordsTotal" => count($Customers),            "recordsFiltered" => count($Customers),            "data" => $rows        ]);    }    public function ajaxCustomerMasterDetails() {        $params = [            'where' => ['cust_id' => $this->input->post('cust_id')]        ];        $customer = $this->Customer->getCustomer($params);        echo json_encode($customer[0]);    }    public function ajaxCustomerMasterDelete() {        $where = ['cust_id' => $this->input->post('cust_id')];        $comp = $this->Customer->deleteCustomer($where);        return json_encode(['true']);    }    public function ajaxCustomersMasterSubmit() {        $post = $this->input->post();        if (isset($post['cust_id']) && !empty($post['cust_id'])) {            $this->Customer->putCustomer($post);        } else {            $this->Customer->postCustomer($post);        }    }    public function ajaxUniqueCustomerHotelAttr(){        $post = $this->input->post();        if (isset($post['hotelIdValue']) && !empty($post['hotelIdValue'])) {            echo checkHotelUnique([                'table' => $this->_customer_master,                'primary_id' => "cust_id",                'primaryVal' => $post['primaryVal'],                'hotelIdValue' => $post['hotelIdValue'],                'attr' => $post['attr'],                'attrVal' => $post['attrVal']                    ]);        } else {            echo checkHotelUnique([                'table' => $this->_customer_master,                'primary_id' => "cust_id",                'primaryVal' => 0,                'hotelIdValue' => $post['hotelIdValue'],                'attr' => $post['attr'],                'attrVal' => $post['attrVal']                    ]);        }            }    public function ajaxUniqueCustDocAttr(){        $post = $this->input->post();        if (isset($post['primaryVal']) && !empty($post['primaryVal'])) {            echo checkHotelUnique([                'table' => $this->_customer_doc_master,                'primary_id' => "cust_id",                'primaryVal' => $post['primaryVal'],                                'hotelIdValue' => $this->session->userdata('hotel_id'),                'attr' => $post['attr'],                'attrVal' => $post['attrVal']                    ]);        } else {            echo checkHotelUnique([                'table' => $this->_customer_doc_master,                'primary_id' => "cust_id",                'primaryVal' => 0,                                'hotelIdValue' => $this->session->userdata('hotel_id'),                'attr' => $post['attr'],                'attrVal' => $post['attrVal']                    ]);        }       }    public function ajaxCheckMemberValid(){        $post = $this->input->post();        $Customers = $this->Customer->getCustomer(['where'=>['cm.cust_id'=>$post['cust_id']]]);        $membership = $this->Membership_master->getMembershipMasters(['where'=>['mm.membership_id'=>$post['membership_type']]]);        $dArr = explode("-",$post['membership_issue_date']);        $startDate = strtotime($dArr[2]."-".$dArr[1]."-".$dArr[0]);        $endDate = strtotime("+{$membership[0]['membership_validity']} months", $startDate);        $currentTime = time();        if( $currentTime >= $startDate && $currentTime <= $endDate){            echo 0;        }else{            echo 1;        }    }}